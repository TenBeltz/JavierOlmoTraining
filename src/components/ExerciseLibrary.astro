---
import SearchExercise from "./SearchExercise.astro";
import ExerciseFilters from "./ExerciseFilters.astro";
import AddExercise from "./AddExercise.astro";
import outlineStar from "../assets/outline-star.svg?raw"
import solidStar from "../assets/solid-star.svg?raw"

export interface Exercise {
  id: number;
  favorito: boolean;
  titulo: string;
  video?: string;
  video_url?: string;
  fecha: string;
  nivel: string;
  creador: number;
  subida?: number;
  categorias: number[];
  usuarios_fav?: number[];
}

export interface Category {
  id: number;
  titulo: string;
  aprobada?: boolean;
  categoria_padre?: number;
  categorias_hijas?: number[];
  subida_por?: number;
}

export let exercises: Exercise[] = [];
export let filteredExercises: Exercise[] = [];
export let categories: Category[] = [];
let loading = true;
let error: string | null = null;
let token: string | undefined;

if (Astro.cookies.has("token")) {
  const tokenCookie = Astro.cookies.get("token");
  token = tokenCookie.value;
}

async function fetchData(): Promise<void> {
  try {
    if (!token) {
      // Redirect user to /signin if there's no token
      window.location.href = '/signin';
    }
    
    const [exercisesResponse, categoriesResponse] = await Promise.all([
      fetch('https://api.javierolmotraining.es/ejercicios/', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': `Token ${token}`,
        },
      }),
      fetch('https://api.javierolmotraining.es/categorias/', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': `Token ${token}`,
        },
      }),
    ]);

    if (!exercisesResponse.ok || !categoriesResponse.ok) {
      throw new Error('Failed to fetch data');
    }

    [exercises, categories] = await Promise.all([
      exercisesResponse.json(),
      categoriesResponse.json(),
    ]);
    console.log(exercises);
    console.log("***********************")
  } catch (err) {
    console.error('Fetch error:', err);
    error = err instanceof Error ? err.message : 'Failed to fetch data';
  } finally {
    loading = false;
  }
}

function filterExercises(searchValue?: string, selectedLevel?: string, selectedCategory?: number, selectedSubcategory?: number, onlyFavorites?: boolean): void {
  let filtered = [...exercises];

  if (searchValue) {
    filtered = filtered.filter(item => item.titulo.toLowerCase().includes(searchValue.toLowerCase()));
  }

  if (selectedLevel) {
    filtered = filtered.filter(item => item.nivel.includes(selectedLevel));
  }

  if (selectedCategory) {
    filtered = filtered.filter(item => item.categorias.includes(selectedCategory));
  }

  if (selectedSubcategory) {
    filtered = filtered.filter(item => item.categorias.includes(selectedSubcategory));
  }

  if (onlyFavorites) {
    filtered = filtered.filter(item => item.favorito === true);
  }

  filteredExercises = filtered;
}

async function handleRequest(): Promise<void> {
  await fetchData();

  const { request } = Astro;
  const url = new URL(request.url);
  
  const searchValue = url.searchParams.get('search-exercise');
  const selectedLevel = url.searchParams.get('levels') ? String(url.searchParams.get('levels')) : undefined;
  const selectedCategory = url.searchParams.get('categories') ? Number(url.searchParams.get('categories')) : undefined;
  const selectedSubcategory = url.searchParams.get('subcategories') ? Number(url.searchParams.get('subcategories')) : undefined;
  const onlyFavorites = url.searchParams.get('favorito') ? Boolean(url.searchParams.get('favorito')) : undefined;

  filterExercises(searchValue, selectedLevel, selectedCategory, selectedSubcategory, onlyFavorites);
}

await handleRequest();

function isIframe(videoUrl: string): boolean {
  if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
    return true;
  } else if (videoUrl.includes('tiktok.com')) {
    return true;
  } else if ((videoUrl.includes('instagram.com'))) {
    return true;
  }
  return false;
}

function renderVideo(videoUrl: string): string {
  if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
    const youtubeId = videoUrl.split('v=')[1]?.split('&')[0] || videoUrl.split('/').pop();
    return `https://www.youtube.com/embed/${youtubeId}`;
  } else if (videoUrl.includes('tiktok.com')) {
    const tiktokId = videoUrl.split('/').pop();
    return `https://www.tiktok.com/embed/${tiktokId}`;
  } else if (videoUrl.includes('instagram.com')) {
    const instagramId = videoUrl.split('/p/')[1]?.split('/')[0];
    return `https://www.instagram.com/p/${instagramId}/embed`;
  }
  return videoUrl;
}
---

<div class="flex flex-col mb-8 gap-y-8">
  <form id="filter-exercise-form" method="get"></form>
  <SearchExercise />
  
  <div class="flex flex-wrap gap-6 mx-4">
    <button form="filter-exercise-form" type="submit" class="px-6 py-1 bg-black border rounded-full text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime">Filtrar</button>
    <button form="filter-exercise-form" id="clear-filters" type="reset" class="px-6 py-1 bg-black border rounded-full text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime">Quitar filtros</button>

    <AddExercise />
    <ExerciseFilters categories={categories} />
  </div>
</div>
{error === "Token is not available" ? (
  <script>
    window.location.href = '/signin';
  </script>
  )
: null}
{loading ? (
  <div class="py-4 text-center">Loading...</div>
) : error ? (
  <div class="py-4 text-center text-red-600">{error}</div>
) : (
  <div class="grid gap-4 mx-4 text-black xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
    {filteredExercises.map(exercise => (
      <div id={exercise.id.toString()} data-is-favorite={`${exercise.favorito.valueOf()}`} class="flex flex-col justify-between p-4 bg-white hover:cursor-pointer exercise gap-y-2 rounded-3xl">
        <div>
          {exercise.video_url ? (
            isIframe(exercise.video_url) ? (
              <iframe loading="lazy" src={renderVideo(exercise.video_url)} class="rounded-lg w-full aspect-[9/6]"></iframe>
              <dialog class="modal">
                <div class="modal-box rounded-xl">
                  <h3 class="mb-6 text-lg font-bold text-center text-white">{exercise.titulo}</h3>
                  <div>
                    <iframe src={renderVideo(exercise.video_url)} class="rounded-lg w-full aspect-[9/6]"></iframe>
                  </div>
                  <div class="modal-action">
                    <form method="dialog">
                      <button class="text-black btn bg-electric-lime hover:bg-lime-zest">Cerrar</button>
                    </form>
                  </div>
                </div>
              </dialog>
            ) : (
              <video preload="none" src={exercise.video_url} controls class="aspect-[9/6] rounded-lg w-full"></video>
              <dialog class="modal">
                <div class="modal-box rounded-xl">
                  <h3 class="mb-6 text-lg font-bold text-center text-white">{exercise.titulo}</h3>
                  <div>
                    <video preload="none" src={exercise.video_url} controls class="w-full rounded-lg aspect-[9/6]"></video>
                  </div>
                  <div class="modal-action">
                    <form method="dialog">
                      <button class="text-black btn bg-electric-lime hover:bg-lime-zest">Cerrar</button>
                    </form>
                  </div>
                </div>
              </dialog>
            )
          ) : (
            <p>No hay video disponible</p>
          )}
        </div>
        <div>
          <div class="flex justify-between">
            <span class="flex items-center gap-x-1">
              <span>Nivel:</span>
              <span class="flex">
                {
                  exercise.nivel === 'A' ? 
                    <Fragment set:html={solidStar} />
                    <Fragment set:html={solidStar} />
                    <Fragment set:html={solidStar} />
                  : null
                }
                {
                  exercise.nivel === 'B' ? 
                  <Fragment set:html={solidStar} />
                  <Fragment set:html={solidStar} />
                  <Fragment set:html={outlineStar} />
                  : null
                }
                {
                  exercise.nivel === 'I' ? 
                    <Fragment set:html={solidStar} />
                    <Fragment set:html={outlineStar} />
                    <Fragment set:html={outlineStar} />
                  : null
                }
              </span>
            </span>
            <button class="transition-transform favorite-button hover:scale-105 active:scale-75">
              {exercise.favorito === false ? (
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                  <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z" clip-rule="evenodd" />
                </svg>
              )}
            </button>
          </div>
          <div class="flex items-center justify-center flex-grow text-center">
            <span>{exercise.titulo}</span>
          </div>
        </div>
      </div>
    ))}
  </div>
)}

<script>
  const exercises = document.querySelectorAll('.exercise');

  function getCookie(name: any) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  }

  exercises.forEach(exercise => {
    const favoriteButton = exercise.querySelector('.favorite-button');

    exercise.addEventListener('click', event => {
      const modal = exercise.querySelector('dialog');
      if (modal instanceof HTMLDialogElement) {
        modal.showModal();
        event.stopPropagation();
      }
    });

    favoriteButton.addEventListener('click', async (event) => {
      event.stopPropagation();

      const exerciseId: string = exercise.getAttribute('id');
      const isFavorite: boolean = exercise.getAttribute('data-is-favorite').valueOf() === 'true';

      try {
        const token = getCookie('token');
        const url = `https://api.javierolmotraining.es/favorito/`;
        const method = isFavorite ? 'DELETE' : 'POST';
        
        const exercisesResponse = await fetch(url, {
          method,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': `Token ${token}`,
          },
          body: JSON.stringify({ ejercicio_id: exerciseId })
        });

        if (exercisesResponse.ok) {
          exercise.setAttribute('data-is-favorite', (!isFavorite).toString());

          if (!isFavorite) {
            favoriteButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z" clip-rule="evenodd" />
              </svg>
            `;
          } else {
            favoriteButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
              </svg>
            `;
          }
        }

      } catch (error) {
        console.error('Error en la solicitud', error);
      }
    });
  });

  document.getElementById('clear-filters')?.addEventListener('click', () => {
    const url = new URL(window.location.href);
    url.search = '';
    window.location.href = url.toString();
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    const token = document.cookie.split('; ').find(row => row.startsWith('token='));
    const tokenValue = token ? token.split('=')[1] : null;
  
    if (!tokenValue) {
      window.location.href = '/signin';
    }
  });
</script>