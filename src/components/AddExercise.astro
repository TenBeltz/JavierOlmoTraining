---
import { exercises, categories } from "./ExerciseLibrary.astro";

const levels = [...new Set(exercises.map(exercise => exercise.nivel))];
---

<style>
  select[multiple] { background-image: none; }
</style>

<form id="add-exercise-form" method="post" class="flex flex-col gap-y-4">
  <button
    id="add-exercise-button"
    class="px-6 py-1 bg-black border rounded-full text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime"
  >
    Añadir ejercicio
  </button>
</form>

<dialog id="add-exercise-modal" class="text-white modal">
  <div class="modal-box bg-[#1d232a] rounded-xl scrollbar-hidden">
    <h3 class="mb-6 text-3xl text-center">Nuevo ejercicio</h3>
    <form id="exercise-form" class="flex flex-col gap-y-4">
      <fieldset class="flex flex-col p-4 border rounded-2xl border-electric-lime gap-y-3">
        <legend class="text-lg font-bold">Detalles</legend>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Nombre del ejercicio</span>
          <input type="text" id="titulo" name="titulo" class="text-black rounded-full" required>
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">URL <span class="text-zinc-500">(TikTok/Instagram/YouTube)</span></span>
          <input type="url" id="video-url" name="video_url" class="text-black rounded-full">
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Nivel</span>
          <select id="level" name="nivel" class="text-black rounded-full">
            {levels.map(level => (
              <option value={level}>
                {level === 'A' ? 'Avanzado' : level === 'B' ? 'Intermedio' : 'Básico'}
              </option>
            ))}
          </select>
        </label>
      </fieldset>

      <fieldset class="flex flex-col p-4 border rounded-2xl gap-y-3 border-electric-lime">
        <legend class="text-lg font-bold">Video</legend>
        <div class="flex items-center justify-center w-full">
          <label for="dropzone-file" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg class="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
              </svg>
              <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
              <p class="text-xs text-gray-500">MP4 (MAX. 10MB)</p>
            </div>
            <input id="dropzone-file" name="video" type="file" class="hidden" accept="video/mp4" />
          </label>
        </div> 
      </fieldset>

      <fieldset class="flex flex-col p-4 border rounded-2xl gap-y-3 border-electric-lime">
        <legend class="text-lg font-bold">Categorías</legend>
        {categories.filter(parentcategory => !parentcategory.categoria_padre)
          .map(category => (
            <label for={`select-categories-${category.id}`} class="relative flex flex-col">
              <span id={`span-category-${category.titulo}`} class="px-4 py-2 text-black bg-white rounded-full hover:cursor-pointer">{category.titulo}</span>
              <select form="add-exercise-form" id={`select-categories-${category.id}`} class="hidden mt-1 text-black rounded-2xl" name="categories" multiple required>
                <option value="" disabled>Seleccionar subcategorías</option>
                {category.categorias_hijas?.map(subcategoryId => {
                  const subcategory = categories.find(cat => cat.id === subcategoryId);
                  return subcategory ? <option value={subcategory.id}>{subcategory.titulo}</option> : null;
                })}
              </select>
            </label>
          ))}
      </fieldset>

      <fieldset class="flex flex-col p-4 border rounded-2xl gap-y-3 border-electric-lime">
        <legend class="text-lg font-bold">Nuevas Categorías</legend>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Título de la nueva categoría</span>
          <input type="text" id="new-category-title" class="text-black rounded-full">
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Categoría padre</span>
          <select id="new-category-parent-id" class="text-black rounded-full">
            <option value="" disabled selected>Seleccionar categoría padre</option>
            {categories.filter(parentcategory => !parentcategory.categoria_padre).map(parent => (
              <option value={parent.id}>{parent.titulo}</option>
            ))}
          </select>
        </label>
        <button type="button" id="add-new-category" class="py-2 text-black transition-colors rounded-full bg-electric-lime hover:bg-lime-zest">
          Agregar Nueva Categoría
        </button>
        <div id="new-categories-list" class="mt-2"></div>
      </fieldset>

      <button type="submit" class="text-black rounded-full btn bg-electric-lime hover:bg-lime-zest">
        Subir ejercicio
      </button>
    </form>
    <div class="modal-action">
      <form method="dialog">
        <button class="text-black btn bg-electric-lime hover:bg-lime-zest">Cerrar</button>
      </form>
    </div>
  </div>
</dialog>

<script>
  const addExerciseButton = document.getElementById('add-exercise-button');
  const exerciseForm = document.getElementById('exercise-form') as HTMLFormElement;
  const addNewCategoryButton = document.getElementById('add-new-category');
  const newCategoriesList = document.getElementById('new-categories-list');

  let newCategories = [];

  addExerciseButton.addEventListener('click', event => {
    event.preventDefault();
    const addExerciseModal = document.getElementById('add-exercise-modal') as HTMLDialogElement;
    addExerciseModal.showModal();
  });

  addNewCategoryButton.addEventListener('click', () => {
    const newCategoryTitle = (document.getElementById('new-category-title') as HTMLInputElement).value;
    const newCategoryParentId = (document.getElementById('new-category-parent-id') as HTMLSelectElement).value;

    if (newCategoryTitle && newCategoryParentId) {
      const newCategory = {
        title: newCategoryTitle,
        parentId: newCategoryParentId,
      };

      newCategories.push(newCategory);
      updateNewCategoriesList();

      (document.getElementById('new-category-title') as HTMLInputElement).value = '';
      (document.getElementById('new-category-parent-id') as HTMLSelectElement).value = '';
    }
  });

  function updateNewCategoriesList() {
    newCategoriesList.innerHTML = '';
    newCategories.forEach((category, index) => {
      const categoryItem = document.createElement('div');
      categoryItem.className = 'flex justify-between items-center p-2 bg-zinc-800 rounded-md mt-2';
      categoryItem.innerHTML = `
        <span>${category.title}</span>
        <button type="button" class="ml-4 text-red-500 remove-category-btn" data-index="${index}">Eliminar</button>
      `;
      newCategoriesList.appendChild(categoryItem);
    });

    const removeButtons = document.querySelectorAll('.remove-category-btn');
    removeButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        const index = (event.target as HTMLElement).getAttribute('data-index');
        newCategories.splice(Number(index), 1);
        updateNewCategoriesList();
      });
    });
  }

  exerciseForm.addEventListener('submit', async event => {
  event.preventDefault();

  const formData = new FormData(exerciseForm);

  // Añadir nuevas categorías al FormData
  newCategories.forEach((cat, index) => {
    formData.append(`nuevas_categorias[${index}][titulo]`, cat.title);
    formData.append(`nuevas_categorias[${index}][categoria_padre_id]`, cat.parentId);
  });

  // Añadir categorías seleccionadas al FormData
  const selectedCategories = Array.from(document.querySelectorAll('[id^="select-categories-"]'))
    .flatMap(select => Array.from((select as HTMLSelectElement).selectedOptions))
    .map(option => option.value);

  selectedCategories.forEach((category, index) => {
    formData.append(`categorias[${index}]`, category);
  });

  let token: any;

  // Get token from cookies
  document.cookie.split(';').forEach(cookie => {
    const [key, value] = cookie.split('=');
    if (key.trim() === 'token') {
      token = value;
    }
  });

  if (!token) {
    window.location.href = '/signin';
  }

  const response = await fetch('https://api.javierolmotraining.es/ejercicio/', {
    method: 'POST',
    headers: {
      'accept': 'application/json',
      'Authorization': 'Token ' + token,
    },
    body: formData,
  });

  const responseData = await response.json();

  if (response.ok) {
    alert("Ejercicio añadido exitosamente");

    // Cerrar el modal
    const addExerciseModal = document.getElementById('add-exercise-modal') as HTMLDialogElement;
    addExerciseModal.close();
  } else {
    handleErrors(responseData);
  }
});

// Función para manejar y mostrar errores
function handleErrors(errors) {
  const errorElements = {
    titulo: document.getElementById('titulo'),
    nivel: document.getElementById('level'),
    video_url: document.getElementById('video-url'),
  };

  // Limpiar errores previos
  Object.values(errorElements).forEach(input => {
    input.classList.remove('border-red-500');
    const errorMessage = input.nextElementSibling;
    if (errorMessage && errorMessage.classList.contains('error-message')) {
      errorMessage.remove();
    }
  });

  // Mostrar errores
  Object.keys(errors).forEach(field => {
    if (errorElements[field]) {
      const inputElement = errorElements[field];
      inputElement.classList.add('border-red-500');
      
      // Crear un mensaje de error debajo del campo
      const errorText = document.createElement('span');
      errorText.className = 'text-red-500 text-sm error-message';
      errorText.innerText = errors[field][0];
      inputElement.insertAdjacentElement('afterend', errorText);
    }
  });

  if (errors.non_field_errors) {
    // Mostrar errores generales del formulario
    alert(errors.non_field_errors.join(', '));
  }
}
</script>